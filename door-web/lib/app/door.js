// Generated by CoffeeScript 1.7.1
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(["modals/error_modal", "modals/login_modal", "modals/deny_modal"], function(error_modal, login_modal, deny_modal) {
  var door;
  return door = (function(_super) {
    __extends(door, _super);

    function door() {
      this.is_admin = __bind(this.is_admin, this);
      this.is_authed = __bind(this.is_authed, this);
      this.try_auth = __bind(this.try_auth, this);
      this.auth = __bind(this.auth, this);
      this.is_auth = __bind(this.is_auth, this);
      return door.__super__.constructor.apply(this, arguments);
    }

    door.prototype.el = ".main-body";

    door.prototype.initialize = function() {
      this.socket = io.connect("http://127.0.0.1:8080" || location.host);
      this.socket.on('connect', function() {
        return console.log('connected to socket');
      });
      this.socket.on('error', this.error);
      this.socket.on('auth', this.auth);
      this.admin = false;
      return this.authed = true;
    };

    door.prototype.render = function() {
      return console.log('rendering!');
    };

    door.prototype.error = function(e) {
      return new error_modal().render(e);
    };

    door.prototype.is_auth = function() {
      return this.admin;
    };

    door.prototype.auth = function(creds) {
      App.Views.navbar.show_creds(creds);
      if (creds.admin === true) {
        return this.admin = true;
      }
    };

    door.prototype.try_auth = function(user, passwd) {
      return this.socket.emit("auth", {
        user: user,
        passwd: passwd
      });
    };

    door.prototype.is_authed = function() {
      return this.authed;
    };

    door.prototype.is_admin = function() {
      return this.admin;
    };

    return door;

  })(Backbone.View);
});
